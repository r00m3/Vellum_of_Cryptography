package text

import "fmt"

func separator() {
	fmt.Printf("\n")
	fmt.Println(`		・────────── ⧝  ──────────・`)
	fmt.Printf("\n")
}

func titleSeparator() {
	fmt.Printf("\n")
	fmt.Println(`━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━`)
	fmt.Printf("\n")
}

func PrintREADME() {
	titleSeparator()
	fmt.Printf("		Vellum_of_Cryptography v0.0.1\n")
	fmt.Printf("				by 000m3\n")
	titleSeparator()
	fmt.Printf("> Uncomplicated way to get you familiar with concepts of cryptography.\n")
	fmt.Printf("> To use these concepts in real world, look for other tools by 000m3.\n")
	separator()
	fmt.Printf("[Confidentiality] - hide the message.\n")
	fmt.Printf("[Integrity]       - message is unchanged.\n")
	fmt.Printf("[Authentication]  - message belongs to actual sender.\n")
	separator()
	fmt.Printf("> Vellum_of_Cryptography:\n")
	fmt.Printf("	- intentionally uses very abstract examples.\n")
	fmt.Printf("	- intentionally skips complex implementation details.\n")
	fmt.Printf("	- is not complete.\n")
	fmt.Printf("	- is in early version.\n")
	fmt.Printf("	- might and probably do contain inaccurate information.\n")
	fmt.Printf("	- will be improved and fixed in further releases.\n")
	separator()
	fmt.Printf("> Notation used in Vellum_of_Cryptography:\n")
	fmt.Printf("\n")
	fmt.Printf("	[Function description]\n")
	fmt.Printf("FUNCTION_NAME(FUNCTION_PARAMETERS) -> FUNCTION_RETURN\n")
	separator()
	fmt.Printf("> Some terms in Vellum_of_Cryptography are used interchangeably:\n")
	fmt.Printf("SECRET_MESSAGE | ENCRYPTED_MESSAGE | ENCRYPTED_DOCUMENT | ENCRYPTED_FILE\n")
	separator()
	fmt.Printf("			 ^   ^   ^\n")
	fmt.Printf("			 Scroll up\n")
	fmt.Printf("\n")
	fmt.Printf("[0] README\n")
	fmt.Printf("	[1] Hash functions\n")
	fmt.Printf("	[2] Authenticated encryption\n")
	fmt.Printf("	[3] Symmetric encryption\n")
	fmt.Printf("	[4] Asymmetric encryption\n")
	fmt.Printf("Select topic and press Enter:\n")
}

func PrintHashFunctions() {
	titleSeparator()
	fmt.Printf("		Hash functions\n")
	titleSeparator()
	fmt.Printf("> Create file.txt\n")
	fmt.Printf("> Open file.txt\n")
	fmt.Printf("> Type letter a\n")
	fmt.Printf("> Save and close file.txt\n")
	fmt.Printf("> Open terminal in same folder as file.txt\n")
	fmt.Printf("On Linux type:\n")
	fmt.Printf("	sha256sum file.txt\n")
	fmt.Printf("On MacOS type:\n")
	fmt.Printf("	shasum file.txt -a 256\n")
	fmt.Printf("On Windows type:\n")
	fmt.Printf("	get-filehash file.txt -algo sha256\n")
	fmt.Printf("> You will get(without trailing new line):\n")
	fmt.Printf("	ca978112ca1bbdcafac231b39a23dc4da786eff8147c4e72b9807785afee48bb\n")
	fmt.Printf("> If your text editor automatically add\n")
	fmt.Printf("> 'invisible' new empty line at the end of file:\n")
	fmt.Printf("	87428fc522803d31065e7bce3cf03fe475096631e5e07bbd7a0fde60c4cf25c7\n")
	fmt.Printf("> You just calculated sha256 HASH or checksum of file.txt\n")
	separator()
	fmt.Printf("> Change content in file.txt by replacing letter a with letter b\n")
	fmt.Printf("> Calculate file.txt HASH\n")
	fmt.Printf("> You will get:\n")
	fmt.Printf("	3e23e8160039594a33894f6564e1b1348bbd7a0088d42c4acb73eeaed59c009d\n")
	fmt.Printf("> If your text editor automatically add\n")
	fmt.Printf("> 'invisible' new empty line at the end of file:\n")
	fmt.Printf("	0263829989b6fd954f72baaf2fc64bc2e2f01d692d4de72986ea808f6e99813f\n")
	separator()
	fmt.Printf("Every file has it's unique HASH.\n")
	fmt.Printf("If you change even a bit of that file, HASH will also change.\n")
	fmt.Printf("You know that file.txt with letter a inside it will produce this HASH:\n")
	fmt.Printf("	ca978112ca1bbdcafac231b39a23dc4da786eff8147c4e72b9807785afee48bb\n")
	fmt.Printf("You know this because you just calculated it.\n")
	fmt.Printf("Everyone can do the same. Create file.txt and calculate the HASH.\n")
	fmt.Printf("What you CAN'T do:\n")
	fmt.Printf("	- GUESS what file with what content produce:\n")
	fmt.Printf("	ca978112ca1bbdcafac231b39a23dc4da786eff8147c4e72b9807785afee48bb\n")
	fmt.Printf("You can NOT guess file knowing it's HASH.\n")
	fmt.Printf("You CAN calculate HASH if you have the file.\n")
	separator()
	fmt.Printf("PERSON_A creates FILE_A and calculates HASH_A_1.\n")
	fmt.Printf("PERSON_A puts FILE_A on the internet.\n")
	fmt.Printf("PERSON_A puts HASH_A_1 on his PRIVATE_WEBSITE.\n")
	fmt.Printf("PERSON_B knows PRIVATE_WEBSITE belongs to PERSON_A.\n")
	fmt.Printf("PERSON_C changes content of FILE_A and says it's same FILE_A from PERSON_A.\n")
	fmt.Printf("PERSON_B downloads FILE_A and calculates HASH_A_2.\n")
	fmt.Printf("PERSON_B compares HASH_A_2 which they just calculated\n")
	fmt.Printf("with HASH_A_1 from PRIVATE_WEBSITE.\n")
	fmt.Printf("PERSON_B sees that HASH_A_1 and HASH_A_2 does not match.\n")
	fmt.Printf("PERSON_B now knows that even if FILE_A looks the same,\n")
	fmt.Printf("someone on the internet changed it.\n")
	fmt.Printf("PERSON_B now knows that it is not safe to use FILE_A.\n")
	separator()
	fmt.Printf("			 ^   ^   ^\n")
	fmt.Printf("			 Scroll up\n")
	fmt.Printf("\n")
	fmt.Printf("	[0] README\n")
	fmt.Printf("[1] Hash functions\n")
	fmt.Printf("	[2] Authenticated encryption\n")
	fmt.Printf("	[3] Symmetric encryption\n")
	fmt.Printf("	[4] Asymmetric encryption\n")
	fmt.Printf("Select topic and press Enter:\n")
}

func PrintAuthenticatedEncryption() {
	titleSeparator()
	fmt.Printf("		Authenticated encryption [AE]\n")
	titleSeparator()
	fmt.Printf("> PERSON_A generates PERSON_A_SECRET_KEY.\n")
	fmt.Printf("> PERSON_A encrypts PERSON_A_SECRET_MESSAGE with PERSON_A_SECRET_KEY.\n")
	fmt.Printf("> Only ones which have PERSON_A_SECRET_KEY can:\n")
	fmt.Printf("	- encrypt PERSON_A_SECRET_MESSAGE.\n")
	fmt.Printf("	- decrypt PERSON_A_SECRET_MESSAGE.\n")
	fmt.Printf("	- modify PERSON_A_SECRET_MESSAGE.\n")
	separator()
	fmt.Printf("	[Generate PERSON_A_SECRET_KEY]\n")
	fmt.Printf("GENERATE_PERSON_A_SECRET_KEY() -> PERSON_A_SECRET_KEY\n")
	fmt.Printf("\n")
	fmt.Printf("	[Encrypt PERSON_A_SECRET_MESSAGE]\n")
	fmt.Printf(" ENCRYPT(PERSON_A_SECRET_KEY, NONCE, UNENCRYPTED_MESSAGE) -> PERSON_A_SECRET_MESSAGE\n")
	fmt.Printf("\n")
	fmt.Printf("	[NONCE = a number that can be used only once.]\n")
	fmt.Printf("NONCE is not required to be secret.\n")
	fmt.Printf("You must not use same NONCE twice when encrypting with same SECRET_KEY.\n")
	fmt.Printf("\n")
	fmt.Printf("	[Decrypt PERSON_A_SECRET_MESSAGE]\n")
	fmt.Printf("DECRYPT(PERSON_A_SECRET_KEY, NONCE, PERSON_A_SECRET_MESSAGE) -> UNENCRYPTED_MESSAGE\n")
	separator()
	fmt.Printf("> Authenticated encryption with associated data [AEAD]\n")
	fmt.Printf("> Same as [AE], but some data(associated data) can be left in plaintext(unencrypted).\n")
	fmt.Printf("\n")
	fmt.Printf("	[Generate PERSON_A_SECRET_KEY]\n")
	fmt.Printf("GENERATE_PERSON_A_SECRET_KEY() -> PERSON_A_SECRET_KEY\n")
	fmt.Printf("\n")
	fmt.Printf("	[Encrypt PERSON_A_SECRET_MESSAGE with associated data]\n")
	fmt.Printf("ENCRYPT(PERSON_A_SECRET_KEY, NONCE, UNENCRYPTED_MESSAGE, UNENCRYPTED_ADDITIONAL_DATA) -> \n")
	fmt.Printf("PERSON_A_SECRET_MESSAGE, UNENCRYPTED_ADDITIONAL_DATA\n")
	fmt.Printf("\n")
	fmt.Printf("	[Decrypt PERSON_A_SECRET_MESSAGE with associated data]\n")
	fmt.Printf("DECRYPT(PERSON_A_SECRET_KEY, NONCE, PERSON_A_SECRET_MESSAGE, UNENCRYPTED_ADDITIONAL_DATA) -> \n")
	fmt.Printf("UNENCRYPTED_MESSAGE, UNENCRYPTED_ADDITIONAL_DATA\n")
	fmt.Printf("\n")
	fmt.Printf("> Note that if someone without PERSON_A_SECRET_KEY tries to change UNENCRYPTED_ADDITIONAL_DATA\n")
	fmt.Printf("DECRYPT() function will not proceed and warn user that data was changed.\n")
	separator()
	fmt.Printf("			 ^   ^   ^\n")
	fmt.Printf("			 Scroll up\n")
	fmt.Printf("\n")
	fmt.Printf("	[0] README\n")
	fmt.Printf("	[1] Hash functions\n")
	fmt.Printf("[2] Authenticated encryption\n")
	fmt.Printf("	[3] Symmetric encryption\n")
	fmt.Printf("	[4] Asymmetric encryption\n")
	fmt.Printf("Select topic and press Enter:\n")
}

func PrintSymmetricEncryption() {
	titleSeparator()
	fmt.Printf("		Symmetric encryption\n")
	titleSeparator()
	fmt.Printf("> Generate SECRET_KEY.\n")
	fmt.Printf("> Encrypt the SECRET_MESSAGE with SECRET_KEY.\n")
	fmt.Printf("> SECRET_MESSAGE can be decrypted only with SECRET_KEY.\n")
	separator()
	fmt.Printf("PERSON_A wants to send a SECRET_MESSAGE to PERSON_B.\n")
	fmt.Printf("PERSON_A wants to be sure:\n")
	fmt.Printf("	- only PERSON_B can read the SECRET_MESSAGE.\n")
	fmt.Printf("PERSON_A generates a SECRET_KEY.\n")
	fmt.Printf("PERSON_A uses SECRET_KEY to encrypt a SECRET_MESSAGE.\n")
	fmt.Printf("PERSON_A shares a SECRET_KEY and SECRET_MESSAGE with PERSON_B.\n")
	fmt.Printf("PERSON_B uses SECRET_KEY to read a SECRET_MESSAGE.\n")
	separator()
	fmt.Printf("PERSON_A wants to receive a SECRET_MESSAGE from PERSON_B.\n")
	fmt.Printf("PERSON_A generates SECRET_KEY.\n")
	fmt.Printf("PERSON_A sends SECRET_KEY to PERSON_B.\n")
	fmt.Printf("PERSON_B uses SECRET_KEY to encrypt a SECRET_MESSAGE.\n")
	fmt.Printf("PERSON_B sends SECRET_MESSAGE to PERSON_A.\n")
	fmt.Printf("PERSON_A uses SECRET_KEY to read the SECRET_MESSAGE.\n")
	separator()
	fmt.Printf("	[Generate SECRET_KEY]\n")
	fmt.Printf("GENERATE_SECRET_KEY() -> SECRET_KEY\n")
	fmt.Printf("\n")
	fmt.Printf("	[Encrypt message with SECRET_KEY]\n")
	fmt.Printf("ENCRYPT(SECRET_KEY, UNENCRYPTED_MESSAGE) -> ENCRYPTED_MESSAGE\n")
	fmt.Printf("\n")
	fmt.Printf("	[Decrypt]\n")
	fmt.Printf("DECRYPT(SECRET_KEY, ENCRYPTED_MESSAGE) -> UNENCRYPTED_MESSAGE\n")
	separator()
	fmt.Printf("			 ^   ^   ^\n")
	fmt.Printf("			 Scroll up\n")
	fmt.Printf("\n")
	fmt.Printf("	[0] README\n")
	fmt.Printf("	[1] Hash functions\n")
	fmt.Printf("	[2] Authenticated encryption\n")
	fmt.Printf("[3] Symmetric encryption\n")
	fmt.Printf("	[4] Asymmetric encryption\n")
	fmt.Printf("Select topic and press Enter:\n")
}

func PrintAsymmetricEncryption() {
	titleSeparator()
	fmt.Printf("		Asymmetric encryption [Public-key cryptography]\n")
	titleSeparator()
	fmt.Printf("> Generate SECRET_PRIVATE_KEY. Don't share it with anyone.\n")
	fmt.Printf("> Compute NON_SECRET_PUBLIC_KEY from SECRET_PRIVATE_KEY. You can share it with everyone.\n")
	fmt.Printf("> If you sign a NON_SECRET_MESSAGE with your SECRET_PRIVATE_KEY,\n")
	fmt.Printf("  Everyone who has your NON_SECRET_PUBLIC_KEY can verify that: \n")
	fmt.Printf("	- you are the one who wrote NON_SECRET_MESSAGE.\n")
	fmt.Printf("	- no body changed NON_SECRET_MESSAGE.\n")
	fmt.Printf("> Everyone who has your NON_SECRET_PUBLIC_KEY can write you a SECRET_PRIVATE_MESSAGE.\n")
	fmt.Printf("> Only you, who has SECRET_PRIVATE_KEY will be able to read a SECRET_PRIVATE_MESSAGE.\n")
	separator()
	fmt.Printf("PERSON_A wants to put the NON_SECRET_MESSAGE to the internet.\n")
	fmt.Printf("PERSON_A wants to make sure:\n")
	fmt.Printf("	- everyone on the internet knows PERSON_A and not someone else wrote the NON_SECRET_MESSAGE.\n")
	fmt.Printf("	- everyone on the internet knows that NON_SECRET_MESSAGE is unmodified. \n")
	fmt.Printf("	- it is exact NON_SECRET_MESSAGE which PERSON_A wrote.\n")
	fmt.Printf("\n")
	fmt.Printf("PERSON_A creates a PERSON_A_PRIVATE_KEY.\n")
	fmt.Printf("PERSON_A computes a PERSON_A_PUBLIC_KEY from PERSON_A_PRIVATE_KEY.\n")
	fmt.Printf("PERSON_A signs NON_SECRET_MESSAGE with PERSON_A_PRIVATE_KEY.\n")
	fmt.Printf("PERSON_A now has NON_SECRET_MESSAGE_SIGNATURE.\n")
	fmt.Printf("PERSON_A puts PERSON_A_PUBLIC_KEY on the internet.\n")
	fmt.Printf("PERSON_A puts NON_SECRET_MESSAGE_SIGNATURE on the internet.\n")
	fmt.Printf("PERSON_A puts NON_SECRET_MESSAGE on the internet.\n")
	fmt.Printf("Everyone on the internet can download PERSON_A_PUBLIC_KEY.\n")
	fmt.Printf("Everyone on the internet can download NON_SECRET_MESSAGE_SIGNATURE.\n")
	fmt.Printf("Everyone on the internet can download NON_SECRET_MESSAGE.\n")
	fmt.Printf("\n")
	fmt.Printf("Everyone on the internet can use a PROGRAM where they put:\n")
	fmt.Printf("	- PERSON_A_PUBLIC_KEY, \n")
	fmt.Printf("	- NON_SECRET_MESSAGE_SIGNATURE,\n")
	fmt.Printf("	- NON_SECRET_MESSAGE.\n")
	fmt.Printf("And program tells if NON_SECRET_MESSAGE was signed with PERSON_A_PRIVATE_KEY.\n")
	fmt.Printf("If PROGRAM confirm, that NON_SECRET_MESSAGE was signed with PERSON_A_PRIVATE_KEY:\n")
	fmt.Printf("	- everyone on the internet knows PERSON_A and not someone else wrote NON_SECRET_MESSAGE.\n")
	fmt.Printf("	- everyone on the internet knows that NON_SECRET_MESSAGE is unmodified. \n")
	fmt.Printf("It is exact NON_SECRET_MESSAGE which PERSON_A wrote.\n")
	fmt.Printf("	- because only PERSON_A knows PERSON_A_PRIVATE_KEY.\n")
	fmt.Printf("	- and only PERSON_A_PRIVATE_KEY can be used to sign NON_SECRET_MESSAGE.\n")
	fmt.Printf("	- PERSON_A_PUBLIC_KEY can be used to verify message, but not to sign it.\n")
	separator()
	fmt.Printf("PERSON_A wants to receive a PERSON_A_SECRET_MESSAGE dedicated only to PERSON_A.\n")
	fmt.Printf("PERSON_A wants to be sure:\n")
	fmt.Printf("	- PERSON_A_SECRET_MESSAGE is dedicated only for PERSON_A and no one else can read it.\n")
	fmt.Printf("	- anyone can write a PERSON_A_SECRET_MESSAGE dedicated only for PERSON_A.\n")
	fmt.Printf("PERSON_A creates a PERSON_A_PRIVATE_KEY.\n")
	fmt.Printf("PERSON_A computes a PERSON_A_PUBLIC_KEY from PERSON_A_PRIVATE_KEY.\n")
	fmt.Printf("PERSON_A puts PERSON_A_PUBLIC_KEY on the internet.\n")
	fmt.Printf("Everyone on the internet can download PERSON_A_PUBLIC_KEY.\n")
	fmt.Printf("Everyone on the internet can use a PROGRAM to create a PERSON_A_SECRET_MESSAGE:\n")
	fmt.Printf("	- put PERSON_A_PUBLIC_KEY and plaintext message to that PROGRAM.\n")
	fmt.Printf("	- PROGRAM will return a PERSON_A_SECRET_MESSAGE.\n")
	fmt.Printf("Everyone can put that PERSON_A_SECRET_MESSAGE on the internet.\n")
	fmt.Printf("Only PERSON_A, who has PERSON_A_PRIVATE_KEY can open and read PERSON_A_SECRET_MESSAGE.\n")
	separator()
	fmt.Printf("	[Generate PRIVATE_KEY]\n")
	fmt.Printf("GENERATE_PRIVATE_KEY() -> PRIVATE_KEY \n")
	fmt.Printf("\n")
	fmt.Printf("	[Generate PUBLIC_KEY]\n")
	fmt.Printf("GENERATE_PUBLIC_KEY(PRIVATE_KEY) -> PUBLIC_KEY\n")
	fmt.Printf("\n")
	fmt.Printf("	[Sign data with private key]\n")
	fmt.Printf("SIGN(PRIVATE_KEY, UNSIGNED_DATA) -> SIGNED_DATA\n")
	fmt.Printf("\n")
	fmt.Printf("	[Encrypt data with public key]\n")
	fmt.Printf("ENCRYPT(PUBLIC_KEY, UNENCRYPTED_DATA) -> ENCRYPTED_DATA\n")
	fmt.Printf("\n")
	fmt.Printf("	[Decrypt data with private key]\n")
	fmt.Printf("DECRYPT(PRIVATE_KEY, ENCRYPTED_DATA) -> UNENCRYPTED_DATA\n")
	fmt.Printf("\n")
	fmt.Printf("	[Verify data with public key]\n")
	fmt.Printf("VERIFY(PUBLIC_KEY, SIGNED_DATA) -> GOOD_SIGNATURE or BAD_SIGNATURE\n")
	separator()
	fmt.Printf("			 ^   ^   ^\n")
	fmt.Printf("			 Scroll up\n")
	fmt.Printf("\n")
	fmt.Printf("	[0] README\n")
	fmt.Printf("	[1] Hash functions\n")
	fmt.Printf("	[2] Authenticated encryption\n")
	fmt.Printf("	[3] Symmetric encryption\n")
	fmt.Printf("[4] Asymmetric encryption\n")
	fmt.Printf("Select topic and press Enter:\n")
}

func PrintMenu() {
	fmt.Printf("> Scroll up\n")
	fmt.Printf("\n")
	fmt.Printf("[0] README\n")
	fmt.Printf("[1] Hash functions\n")
	fmt.Printf("[2] Authenticated Encryption\n")
	fmt.Printf("[3] Symmetric encryption\n")
	fmt.Printf("[4] Asymmetric encryption\n")
	fmt.Printf("Select topic and press Enter:\n")
}
